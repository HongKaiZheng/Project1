//#include<iostream>
//using namespace std;
//
////继承的方式有三种
////1,公有继承
////2,保护继承
////3,私有继承
//
//
//class Base1
//{
//public:
//	int m_A;
//protected:
//	int m_B;
//private:
//	int m_C;
//};
//
////公有继承方式
//class Son1 : public Base1
//{
//public:
//	void func() {
//		m_A = 10; //父类内的公有权限,子类内可以访问,保持原有公有权限权限
//		m_B = 10; //父类内的保护权限,子类内可以访问,保持原有保护权限
//		//m_C = 10; //父类内的私有权限,子类内不可访问
//	}
//};
//void test01()
//{
//	Son1 s1;
//	s1.m_A = 20; //使用公有继承方式,父类内的公有权限,子类外也可以访问
//	//s1.m_B = 20; //使用公有继承方式,父类内的保护权限,子类外不可以访问
//	//s1.m_C = 20; //使用公有继承方式,父类内的私有权限,子类外不可以访问
//}
//
////保护继承方式
//class Son2 : protected Base1
//{
//public:
//	void func()
//	{
//		m_A = 20; //父类内的公有权限,子类内可以访问,并变为保护权限
//		m_B = 20; //父类内的保护权限,子类内可以访问,并保持保护权限
//		//m_C = 20; //父类内的私有权限,子类内不可访问
//	}
//};
//
//void test02()
//{
//	Son2 s2;
//	//s2.m_A = 20; //使用保护继承方式,在子类外,都访问不到父类的内容
//	//s2.m_B = 20;
//	//s2.m_C = 20;
//}
//
//class Son3 : private Base1
//{
//public:
//	void func()
//	{
//		m_A = 30; //父类内的公有权限,子类内可以访问,在子类中变为私有权限
//		m_B = 30; //父类内的保护权限,子类内可以访问,在子类中变为私有权限
//		//m_C = 30; //父类内的私有权限,子类内不可访问
//	}
//};
//void test03()
//{
//	Son3 s3;
//	//s3.m_A = 30; //使用保护继承方式,在子类外,都访问不到父类的内容
//	//s3.m_B = 30;
//	//s3.m_C = 30;
//}
//
//int main()
//{
//	system("pause");
//	return 0;
//}