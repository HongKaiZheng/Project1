//#include<iostream>
//using namespace std;
//
////构造函数的调用原则,创建一个类的时候,系统会自动给这一个类生成三个构造函数
////分别是:1,默认构造函数 2,默认析构函数 3,拷贝构造函数
////还有特殊情况:
////1,如果用户自定义了有参构造函数,那么系统就不会再创建默认构造函数,但是会创建拷贝构造函数
////2,如果用户自定义了拷贝构造函数,那么系统将不会再创建其他构造函数
//class Person
//{
//public:
//	//默认构造函数
//	//Person()
//	//{
//	//	cout << "默认构造函数的调用" << endl;
//	//}
//
//	//有参构造函数
//	//Person(int age)
//	//{
//	//	m_age = age;
//	//	cout << "有参构造函数的调用" << endl;
//	//}
//
//	//拷贝构造函数
//	Person(const Person& p)
//	{
//		m_age = p.m_age;
//		cout << "拷贝构造函数的调用" << endl;
//	}
//	int m_age;
//
//	//析构构造函数
//	~Person()
//	{
//		cout << "析构函数的调用" << endl;
//	}
//};
//
////测试在创建了有参构造函数的情况下,系统不提供默认构造函数的情况,测试运行条件是把默认构造函数注释掉
//void test01()
//{
//	//Person p;//此处会报错,因为在用户定义了有参构造函数之后,系统便不再创建默认构造函数,
//				// 我们创建 Person p 调用的是默认构造函数,所以会报错;
//}
//
////测试在创建的拷贝构造函数的时候,系统便不会再提供有参构造和默认构造,测试条件是把默认构造和有参构造
////给注释掉
//void test02()
//{
//	//Person(20);  //此处代码会报错,因为用户自己创建了拷贝构造函数之后,,系统便不会再帮用户生成默认构造
//				  //和有参构造,这里的 Person(20)调用了有参构造,自然是会报错
//	
//}
//
//int main()
//{
//	test01();
//	test02();
//	system("pause");
//	return 0;
//}